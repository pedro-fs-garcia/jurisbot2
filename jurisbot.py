import os
import sys
from typing import List, Dict, Any, Optional
import json
import time
from datetime import datetime

# Importando as bibliotecas necess√°rias
from smolagents import Agent, Tool
import openai

class JurisBot:
    def __init__(self, api_key: Optional[str] = None):
        """
        Inicializa o JurisBot - Assistente Jur√≠dico para busca de jurisprud√™ncias do STF
        
        Args:
            api_key: Chave de API da OpenAI (opcional, pode ser definida como vari√°vel de ambiente)
        """
        # Configurar a API key
        if api_key:
            openai.api_key = api_key
        elif os.environ.get("OPENAI_API_KEY"):
            openai.api_key = os.environ.get("OPENAI_API_KEY")
        else:
            raise ValueError("√â necess√°rio fornecer uma API key da OpenAI")
        
        # Definir as ferramentas dispon√≠veis para o agente
        self.tools = [
            Tool(
                name="buscar_jurisprudencia",
                description="Busca jurisprud√™ncias do STF com base em palavras-chave ou temas",
                function=self.buscar_jurisprudencia
            ),
            Tool(
                name="detalhar_processo",
                description="Obt√©m detalhes espec√≠ficos de um processo do STF pelo n√∫mero",
                function=self.detalhar_processo
            ),
            Tool(
                name="resumir_entendimento",
                description="Resume o entendimento do STF sobre um tema espec√≠fico",
                function=self.resumir_entendimento
            )
        ]
        
        # Criar o agente
        self.agent = Agent(
            tools=self.tools,
            llm="gpt-4o",
            system_prompt=self._get_system_prompt(),
            verbose=True
        )
        
        print("JurisBot inicializado com sucesso!")
        
    def _get_system_prompt(self) -> str:
        """Retorna o prompt do sistema para o agente"""
        return """
        Voc√™ √© JurisBot, um assistente jur√≠dico especializado em jurisprud√™ncias do Supremo Tribunal Federal (STF) do Brasil.
        
        Suas responsabilidades:
        1. Responder perguntas sobre jurisprud√™ncias, decis√µes e entendimentos do STF
        2. Fornecer informa√ß√µes precisas e atualizadas
        3. Citar os n√∫meros dos processos e datas das decis√µes quando poss√≠vel
        4. Usar uma linguagem formal e t√©cnica apropriada para o contexto jur√≠dico
        5. Organizar as informa√ß√µes de forma clara e estruturada
        
        Quando n√£o souber uma resposta espec√≠fica, use as ferramentas dispon√≠veis para buscar informa√ß√µes.
        Se mesmo assim n√£o encontrar a informa√ß√£o, indique honestamente que precisaria de uma pesquisa mais aprofundada.
        
        Hoje √© {data_atual}.
        """.format(data_atual=datetime.now().strftime("%d/%m/%Y"))
    
    def buscar_jurisprudencia(self, query: str) -> Dict[str, Any]:
        """
        Busca jurisprud√™ncias do STF com base em uma consulta
        
        Args:
            query: Consulta ou palavras-chave para busca
            
        Returns:
            Dicion√°rio com os resultados da busca
        """
        # Simula√ß√£o de busca na base de jurisprud√™ncia do STF
        # Em uma implementa√ß√£o real, aqui seria feita uma requisi√ß√£o √† API do STF
        # ou scraping do site de jurisprud√™ncia
        
        print(f"Buscando jurisprud√™ncias para: {query}")
        
        # Simulando tempo de processamento
        time.sleep(1.5)
        
        # Usando a OpenAI para simular resultados
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "Voc√™ √© um especialista em jurisprud√™ncia do STF. Gere resultados realistas para uma busca de jurisprud√™ncia, incluindo n√∫meros de processos, datas, ministros relatores e ementas."},
                {"role": "user", "content": f"Gere 3 resultados de jurisprud√™ncia do STF sobre: {query}. Formate como um JSON com campos: numero_processo, relator, data_julgamento, ementa, e link."}
            ],
            response_format={"type": "json_object"}
        )
        
        # Extrair e retornar os resultados
        resultados = json.loads(response.choices[0].message.content)
        return resultados
    
    def detalhar_processo(self, numero_processo: str) -> Dict[str, Any]:
        """
        Obt√©m detalhes espec√≠ficos de um processo do STF
        
        Args:
            numero_processo: N√∫mero do processo no formato do STF
            
        Returns:
            Dicion√°rio com os detalhes do processo
        """
        print(f"Buscando detalhes do processo: {numero_processo}")
        
        # Simulando tempo de processamento
        time.sleep(1)
        
        # Usando a OpenAI para simular resultados
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "Voc√™ √© um especialista em jurisprud√™ncia do STF. Gere detalhes realistas para um processo espec√≠fico."},
                {"role": "user", "content": f"Gere detalhes completos para o processo {numero_processo} do STF. Formate como um JSON com campos detalhados incluindo partes, hist√≥rico processual, votos dos ministros, etc."}
            ],
            response_format={"type": "json_object"}
        )
        
        # Extrair e retornar os resultados
        detalhes = json.loads(response.choices[0].message.content)
        return detalhes
    
    def resumir_entendimento(self, tema: str) -> Dict[str, Any]:
        """
        Resume o entendimento atual do STF sobre um tema espec√≠fico
        
        Args:
            tema: Tema jur√≠dico para resumo
            
        Returns:
            Dicion√°rio com o resumo do entendimento
        """
        print(f"Resumindo entendimento do STF sobre: {tema}")
        
        # Simulando tempo de processamento
        time.sleep(2)
        
        # Usando a OpenAI para simular resultados
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "Voc√™ √© um especialista em jurisprud√™ncia do STF. Resuma o entendimento atual da corte sobre temas jur√≠dicos espec√≠ficos."},
                {"role": "user", "content": f"Resuma o entendimento atual do STF sobre o tema: {tema}. Inclua a evolu√ß√£o jurisprudencial, principais decis√µes e entendimento atual. Formate como um JSON com campos: tema, entendimento_atual, evolucao_jurisprudencial, decisoes_relevantes."}
            ],
            response_format={"type": "json_object"}
        )
        
        # Extrair e retornar os resultados
        resumo = json.loads(response.choices[0].message.content)
        return resumo
    
    def conversar(self):
        """Inicia uma conversa interativa com o usu√°rio via terminal"""
        print("\n" + "="*50)
        print("ü§ñ JurisBot - Assistente Jur√≠dico STF")
        print("="*50)
        print("Digite 'sair' para encerrar a conversa.\n")
        
        # Mensagem inicial
        print("ü§ñ JurisBot: Ol√°! Sou o JurisBot, seu assistente jur√≠dico especializado em jurisprud√™ncias do STF. Como posso ajudar voc√™ hoje?")
        
        while True:
            # Obter entrada do usu√°rio
            user_input = input("\nüë§ Voc√™: ")
            
            # Verificar se o usu√°rio quer sair
            if user_input.lower() in ["sair", "exit", "quit"]:
                print("\nü§ñ JurisBot: Obrigado por utilizar o JurisBot. At√© a pr√≥xima!")
                break
            
            # Processar a entrada com o agente
            print("\nü§ñ JurisBot est√° pensando...")
            response = self.agent.run(user_input)
            
            # Exibir a resposta
            print(f"\nü§ñ JurisBot: {response}")


if __name__ == "__main__":
    # Verificar se a API key foi fornecida como argumento ou est√° no ambiente
    api_key = os.getenv('OPENAI_API_KEY', None)
    
    try:
        # Inicializar o JurisBot
        jurisbot = JurisBot(api_key)
        
        # Iniciar conversa
        jurisbot.conversar()
    except ValueError as e:
        print(f"Erro: {e}")
        print("Uso: python jurisbot.py [OPENAI_API_KEY]")
        print("Ou defina a vari√°vel de ambiente OPENAI_API_KEY")
    except KeyboardInterrupt:
        print("\nJurisBot encerrado pelo usu√°rio.")
    except Exception as e:
        print(f"Erro inesperado: {e}")

# Exemplo de sa√≠da:
# JurisBot inicializado com sucesso!
# ==================================================
# ü§ñ JurisBot - Assistente Jur√≠dico STF
# ==================================================
# Digite 'sair' para encerrar a conversa.
#
# ü§ñ JurisBot: Ol√°! Sou o JurisBot, seu assistente jur√≠dico especializado em jurisprud√™ncias do STF. Como posso ajudar voc√™ hoje?
#
# üë§ Voc√™: Qual o entendimento do STF sobre aborto em caso de anencefalia?
#
# ü§ñ JurisBot est√° pensando...
# Buscando jurisprud√™ncias para: aborto em caso de anencefalia
# Resumindo entendimento do STF sobre: aborto em caso de anencefalia
#
# ü§ñ JurisBot: O STF decidiu na ADPF 54, julgada em 2012, que a interrup√ß√£o da gravidez de feto anencef√°lico n√£o configura crime de aborto. O relator foi o Ministro Marco Aur√©lio, e a decis√£o foi por maioria (8 votos a 2).
#
# A Corte entendeu que a anencefalia torna invi√°vel a vida extrauterina, e obrigar a mulher a manter a gesta√ß√£o configuraria tortura e viola√ß√£o √† sua dignidade, autonomia e direitos reprodutivos.
#
# Processos relevantes:
# - ADPF 54 (12/04/2012) - Relator Min. Marco Aur√©lio
# - HC 84.025/RJ (2004) - Caso que motivou a posterior ADPF
#
# Esta decis√£o representou um marco na jurisprud√™ncia brasileira sobre direitos reprodutivos, estabelecendo que n√£o h√° crime quando o feto √© anencef√°lico, por n√£o haver potencialidade de vida extrauterina.